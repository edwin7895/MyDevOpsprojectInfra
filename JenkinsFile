pipeline {
    agent any

    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'staging', 'prod'],
            description: 'Selecciona el ambiente a desplegar (dev, staging, prod)'
        )
        choice(
            name: 'ACTION',
            choices: ['plan', 'apply', 'destroy'],
            description: 'Selecciona la acción de Terraform a ejecutar'
        )
    }

    environment {
        AWS_CREDENTIALS_ID = 'aws-credentials'
        WORKSPACE_DIR = "${WORKSPACE}/terraform/environments/${params.ENVIRONMENT}"  // Directorio del ambiente
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/edwin7895/MyDevOpsprojectInfra.git'
            }
        }

        stage('Set Up AWS Credentials') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: AWS_CREDENTIALS_ID]]) {
                    sh '''
                    export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                    export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                    '''
                }
            }
        }

        stage('Terraform Init & Workspace Setup') {
            steps {
                dir(WORKSPACE_DIR) {
                    script {
                        sh """
                        terraform init -backend-config="${WORKSPACE_DIR}/backend.tf"
                        terraform workspace select ${params.ENVIRONMENT} || terraform workspace new ${params.ENVIRONMENT}
                        """
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { params.ACTION == 'plan' }
            }
            steps {
                dir(WORKSPACE_DIR) {
                    script {
                        sh "terraform plan -var-file=${WORKSPACE_DIR}/${params.ENVIRONMENT}.tfvars"
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                dir(WORKSPACE_DIR) {
                    script {
                        sh "terraform apply -var-file=${WORKSPACE_DIR}/${params.ENVIRONMENT}.tfvars -auto-approve"
                    }
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.ACTION == 'destroy' }
            }
            steps {
                dir(WORKSPACE_DIR) {
                    script {
                        sh "terraform destroy -var-file=${WORKSPACE_DIR}/${params.ENVIRONMENT}.tfvars -auto-approve"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Limpia el workspace después de la ejecución del pipeline
        }
        failure {
            echo 'Pipeline failed. Check the logs.'
        }
    }
}
