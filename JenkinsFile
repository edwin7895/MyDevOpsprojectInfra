pipeline {
    agent any

    parameters {
        choice(
            name: 'ACTION',
            choices: ['plan', 'plan-apply', 'plan-destroy'],
            description: 'Selecciona la acción de Terraform a ejecutar'
        )
        string(
            name: 'TERRAFORM_WORKSPACE',
            defaultValue: 'staging',
            description: 'Terraform workspace para usar (staging, production, etc.)'
        )
    }

    environment {
        AWS_CREDENTIALS_ID = 'aws-credentials'  // Cambia esto por el ID de tus credenciales en Jenkins
        TERRAFORM_VERSION = '1.9.5'
        WORKSPACE_DIR = "${WORKSPACE}"  // Directorio de trabajo de Terraform
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/edwin7895/MyDevOpsprojectInfra.git'
            }
        }

        stage('Set Up AWS Credentials') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: AWS_CREDENTIALS_ID]]) {
                    sh '''
                    export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                    export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                    '''
                }
            }
        }

        stage('Terraform Init & Workspace Setup') {
            steps {
                dir(WORKSPACE_DIR) {
                    script {
                        sh """
                        terraform init \
                            -backend-config="key=ecs-fargate/${params.TERRAFORM_WORKSPACE}/terraform.tfstate"
                        """
                        sh """
                        terraform workspace select ${params.TERRAFORM_WORKSPACE} || terraform workspace new ${params.TERRAFORM_WORKSPACE}
                        """
                    }
                }
            }
        }


        stage('Terraform Plan') {
            steps {
                dir(WORKSPACE_DIR) {
                    script {
                        if (params.ACTION == 'plan' || params.ACTION == 'plan-apply' || params.ACTION == 'plan-destroy') {
                            sh 'terraform plan -out=tfplan'
                        }
                    }
                }
            }
        }

        stage('Terraform Apply') {
            when {
                expression { params.ACTION == 'plan-apply' }
            }
            steps {
                dir(WORKSPACE_DIR) {
                    script {
                        sh 'terraform apply -auto-approve tfplan'
                    }
                }
            }
        }

        stage('Terraform Destroy') {
            when {
                expression { params.ACTION == 'plan-destroy' }
            }
            steps {
                dir(WORKSPACE_DIR) {
                    script {
                        sh 'terraform destroy -auto-approve'
                    }
                }
            }
        }

        stage('Post-Action') {
            steps {
                echo "Acción '${params.ACTION}' ejecutada en el workspace '${params.TERRAFORM_WORKSPACE}'"
            }
        }
    }

    post {
        always {
            cleanWs()  // Limpia el workspace después de la ejecución del pipeline
        }
        failure {
            echo 'Pipeline failed. Check the logs.'
        }
    }
}
